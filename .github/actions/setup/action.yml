name: Set up build environment
description: Installs Java and/or Ruby
inputs:
  for:
    required: true
    description: The context for which the build environment should be configured; implies which tasks to run
  aws-role:
    description: Amazon Web Services role ARN to assume
    required: false
  gcp-provider:
    description: Google Cloud Platform Workload Identity Provider
    required: false
  gcp-service-account:
    description: Google Cloud Platform service account
    required: false
runs:
  using: composite
  steps:
    - name: Determine required tools
      id: settings
      shell: bash
      run: |
        case ${{ inputs.for }} in
          pre-commit)
            tools="java"
            ;;
          android-test)
            tools="java kotlin-cache rsvg"
            ;;
          ios-test)
            tools="java kotlin-cache ruby xcode"
            ;;
          android-build)
            tools="java kotlin-cache rsvg ruby aws-secrets-android"
            ;;
          ios-build)
            tools="java kotlin-cache ruby xcode"
            ;;
          android-deploy)
            tools="ruby"
            ;;
          ios-deploy)
            tools="ruby"
            ;;
          *)
            echo "::error::Unknown setup for: ${{ inputs.for }}"
            false
            ;;
        esac
        echo "tools=$tools"
        for tool in $tools; do
          echo "$tool=true" >> "$GITHUB_OUTPUT"
        done
    - name: Read asdf versions
      if: steps.settings.outputs.java == 'true'
      id: asdf
      shell: bash
      run: cat .tool-versions | sed 's/ /=/' | tee -a "$GITHUB_OUTPUT"
    - name: Parse java version
      if: steps.settings.outputs.java == 'true'
      id: java-spec
      shell: bash
      run: |
        DISTRIBUTION=(`echo ${{steps.asdf.outputs.java}} | cut -d - -f1`)
        VERSION=(`echo ${{steps.asdf.outputs.java}} | cut -d - -f2`)
        echo "java-distribution=$DISTRIBUTION" >> "$GITHUB_OUTPUT"
        echo "java-version=$VERSION" >> "$GITHUB_OUTPUT"
    - name: Set up Java
      if: steps.settings.outputs.java == 'true'
      uses: actions/setup-java@v4
      with:
        distribution: ${{steps.java-spec.outputs.java-distribution}}
        java-version: ${{steps.java-spec.outputs.java-version}}
        cache: gradle
    - uses: actions/cache@v4
      if: steps.settings.outputs.kotlin-cache == 'true'
      with:
        path: ~/.konan
        key: konan-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('build.gradle.kts') }}
        restore-keys: konan-${{ runner.os }}-${{ runner.arch }}
    - run: sudo apt-get install librsvg2-bin
      if: steps.settings.outputs.rsvg == 'true'
      shell: bash
    - name: Configure AWS Credentials
      if: inputs.aws-role != ''
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws-role }}
        aws-region: us-east-1
    - name: Fetch AWS secrets for Android
      if: steps.settings.outputs.aws-secrets-android == 'true' && inputs.aws-role != ''
      uses: aws-actions/aws-secretsmanager-get-secrets@v2
      with:
        secret-ids: |
          mobile-app-android-upload-key-passphrase
    - name: Load Android code signing key
      if: steps.settings.outputs.aws-secrets-android == 'true' && inputs.aws-role != ''
      shell: bash
      run: |
        cd androidApp
        aws secretsmanager get-secret-value --secret-id mobile-app-android-upload-key --output json | jq -r '.SecretBinary' | base64 --decode > upload-keystore.jks
    - name: Configure GCP Credentials
      if: inputs.gcp-provider != '' && inputs.gcp-service-account != ''
      uses: google-github-actions/auth@v2
      with:
        create_credentials_file: true
        workload_identity_provider: ${{ inputs.gcp-provider }}
        service_account: ${{ inputs.gcp-service-account }}
    - name: Configure AWS Credentials
      if: inputs.aws-role != ''
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws-role }}
        aws-region: us-east-1
    - name: Set up Ruby
      if: steps.settings.outputs.ruby == 'true'
      uses: ruby/setup-ruby@v1
      with:
        bundler-cache: true
    - name: Patch Fastlane to pick up application default credentials
      if: steps.settings.outputs.ruby == 'true'
      run: bin/patch-fastlane.sh
      shell: bash
    - name: Configure Xcode version
      if: steps.settings.outputs.xcode == 'true'
      shell: bash
      run: |
        sudo xcode-select --switch /Applications/Xcode_16.2.app/Contents/Developer
    - name: Cache CocoaPods dependencies
      if: steps.settings.outputs.xcode == 'true'
      uses: actions/cache@v4
      with:
        path: iosApp/Pods
        key: cocoapods-${{ hashFiles('iosApp/Podfile.lock') }}
        restore-keys: cocoapods-
    - name: Install SwiftLint and xcbeautify
      if: steps.settings.outputs.xcode == 'true'
      shell: bash
      run: brew install swiftlint xcbeautify
