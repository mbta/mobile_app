# frozen_string_literal: true

# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

setup_ci if ENV['CI']

platform :android do
  def package_name(flavor)
    case flavor
    when 'Prod'
      'com.mbta.tid.mbta_app'
    when 'Staging'
      'com.mbta.tid.mbta_app.staging'
    when 'DevOrange'
      'com.mbta.tid.mbta_app.devOrange'
    else
      raise "Unknown flavor #{flavor}"
    end
  end

  desc 'Build an .apk and an .aab with an upcoming version code'
  lane :build do |options|
    package_name = package_name(options[:flavor])

    last_version_code =
      if options[:build_type] == 'Debug'
        0
      else
        begin
          google_play_track_version_codes(
            package_name: package_name,
            track: 'internal'
          ).max
        rescue StandardError => e
          raise unless e.message == "Google Api Error: Invalid request - Package not found: #{package_name}."

          0
        end
      end

    next_version_code = last_version_code + 1
    properties =
      if options[:build_type] == 'Debug'
        { 'android.injected.version.code' => next_version_code }
      else
        {
          'android.injected.signing.store.file' => ENV.fetch('KEYSTORE_FILE', nil),
          'android.injected.signing.store.password' => ENV.fetch('KEYSTORE_PASSWORD', nil),
          'android.injected.signing.key.alias' => ENV.fetch('KEY_ALIAS', nil),
          'android.injected.signing.key.password' => ENV.fetch('KEY_PASSWORD', nil),
          'android.injected.version.code' => next_version_code
        }
      end
    if options[:build_type] != 'Prod'
      UI.message 'Skipped creating Android Sentry release because build is not prod'
    elsif ENV['SENTRY_AUTH_TOKEN'].nil?
      UI.important 'Skipped creating Android Sentry release because SENTRY_AUTH_TOKEN not set'
    else
      version_name = android_get_version_name(gradle_file: 'androidApp/build.gradle.kts')
      sentry_create_release(
        org_slug: 'mbtace',
        project_slug: 'mobile_app_android',
        version: "#{version_name}+#{next_version_code}",
        app_identifier: 'com.mbta.tid.mbta_app',
        finalize: false
      )
    end
    gradle(
      task: 'assemble',
      flavor: options[:flavor],
      build_type: options[:build_type],
      properties: properties
    )
    gradle(
      task: 'bundle',
      flavor: options[:flavor],
      build_type: options[:build_type],
      properties: properties
    )
  end

  desc 'Deploy a new version to Google Play for internal testing'
  lane :internal do |options|
    package_name = package_name(options[:flavor])
    flavor = options[:flavor][0].downcase + options[:flavor][1..]
    upload_to_play_store(
      package_name: package_name,
      track: 'internal',
      aab: "androidApp/build/outputs/bundle/#{flavor}Release/androidApp-#{flavor}-release.aab"
    )
  end
end

platform :ios do
  # https://github.com/fastlane/fastlane/issues/20919#issuecomment-1344976529
  ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '120'

  def app_identifier(scheme)
    case scheme
    when 'Prod'
      'com.mbta.tid.mbtaapp'
    when 'Staging'
      'com.mbta.tid.mbtaapp.staging'
    when 'DevOrange'
      'com.mbta.tid.mbtaapp.devorange'
    else
      raise "Unknown scheme #{scheme}"
    end
  end

  def keychain_path
    # For reasons, KEYCHAIN_PATH is not the actual keychain path created by setup_ci,
    # it's missing a "-db" suffix that macOS adds for some reason,
    # and this helper will both add that suffix to a path and turn `"login"` into a full path of its own
    FastlaneCore::Helper.keychain_path(lane_context[SharedValues::KEYCHAIN_PATH] || 'login')
  end

  desc 'Configure App Store Connect'
  private_lane :app_store_connect do
    app_store_connect_api_key(
      key_id: ENV.fetch('APP_STORE_CONNECT_API_KEY_ID', nil),
      issuer_id: ENV.fetch('APP_STORE_CONNECT_API_KEY_ISSUER', nil),
      key_content: ENV.fetch('APP_STORE_CONNECT_API_KEY_P8', nil)
    )
  end

  desc 'Create a new code signing certificate'
  lane :cert_create do
    app_store_connect
    get_certificates(output_path: 'iosApp/secrets', force: true)
  end

  desc 'Load downloaded code signing certificates'
  lane :cert_load do |options|
    app_store_connect
    import_certificate(
      certificate_path: "iosApp/secrets/#{options[:cert_id]}.cer",
      keychain_path: keychain_path
    )
    import_certificate(
      certificate_path: "iosApp/secrets/#{options[:cert_id]}.p12",
      keychain_path: keychain_path
    )
    get_certificates(
      output_path: 'iosApp/secrets',
      force: false,
      keychain_path: keychain_path
    )
  end

  desc 'Check certificate and provisioning configuration'
  lane :cert_check do |options|
    app_store_connect
    get_certificates(
      output_path: 'iosApp/secrets',
      force: false,
      keychain_path: keychain_path
    )
    get_provisioning_profile(
      app_identifier: app_identifier(options[:scheme]),
      output_path: 'iosApp/secrets',
      readonly: ENV.fetch('CI', nil)
    )
  end

  desc <<~DESC.chomp
    Repairs provisioning profiles related to the app.

    This is the fix for "Provisioning Profile '...' is not valid, skipping this one..."
    and for "No profile for team '...' matching '...' found: Xcode couldn't find any provisioning profiles matching '...'".
  DESC
  lane :repair_provisioning_profiles do |_options|
    # Unfortunately, `sigh repair` at the command line does not accept filtering, and there are
    # provisioning profiles in the account that we don't own, so we need our own copy of this code.
    # from https://github.com/fastlane/fastlane/blob/master/sigh/lib/sigh/repair.rb
    require 'spaceship'
    UI.message("Provisioning profile repair doesn't work with App Store Connect, you'll need to " \
               'provide your credentials directly')
    Spaceship.login(nil, nil)
    Spaceship.select_team
    UI.message('Successfully logged in')

    # Select all 'Invalid' or 'Expired' provisioning profiles
    broken_profiles = Spaceship.provisioning_profile.all.find_all do |profile|
      %w[Invalid Expired].include?(profile.status) and profile.name.include?('com.mbta.tid.mbtaapp')
    end

    if broken_profiles.none?
      UI.success('All provisioning profiles are valid, nothing to do')
    else
      UI.success("Going to repair #{broken_profiles.count} provisioning profiles")

      broken_profiles.each do |profile|
        UI.message("Repairing profile '#{profile.name}'...")
        profile.repair!
      end

      UI.success("Successfully repaired #{broken_profiles.count} provisioning profiles")
    end
  end

  desc 'Run tests'
  lane :test do |options|
    run_tests(
      workspace: 'iosApp/iosApp.xcworkspace',
      scheme: 'Staging',
      device: 'iPhone 15 (17.5)',
      testplan: 'iosAppRetries',
      output_directory: options[:output_directory],
      include_simulator_logs: true,
      xcodebuild_formatter: options[:xcodebuild_formatter],
      number_of_retries: 3
    )
  end

  desc 'Build the app'
  lane :build do |options|
    app_store_connect
    cert_check(scheme: options[:scheme])
    increment_build_number(
      build_number: latest_testflight_build_number(app_identifier: app_identifier(options[:scheme])) + 1,
      xcodeproj: 'iosApp/iosApp.xcodeproj'
    )
    build_app(
      workspace: 'iosApp/iosApp.xcworkspace',
      scheme: options[:scheme],
      output_directory: 'iosApp/build',
      output_name: 'iosApp.ipa',
      export_method: 'app-store',
      xcodebuild_formatter: options[:xcodebuild_formatter]
    )
    if ENV['SENTRY_AUTH_TOKEN'].nil?
      UI.important 'Skipped Sentry upload because SENTRY_AUTH_TOKEN not set'
    else
      sentry_debug_files_upload(
        org_slug: 'mbtace',
        project_slug: 'mobile_app_ios',
        path: 'iosApp/build',
        include_sources: true
      )
    end
  end

  desc 'Upload the app to TestFlight for internal testing'
  lane :internal do |options|
    app_store_connect
    begin
      case options[:scheme]
      when 'DevOrange'
        upload_to_testflight(
          ipa: 'iosApp/build/iosApp.ipa',
          distribute_external: true,
          changelog: '',
          groups: ['Dev Orange Users', 'Dev Orange Testers']
        )
      when 'Staging'
        upload_to_testflight(
          ipa: 'iosApp/build/iosApp.ipa',
          distribute_external: true,
          changelog: '',
          groups: ['Staging App Users', 'TID Beta Testers']
        )
      when 'Prod'
        upload_to_testflight(
          ipa: 'iosApp/build/iosApp.ipa',
          distribute_external: true,
          changelog: '',
          groups: ['Alpha Testers']
        )
      end
    rescue Spaceship::UnexpectedResponse => e
      unless e.error_info == 'Builds cannot be assigned to this internal group. - Cannot add internal group to a build.'
        raise
      end

      UI.important 'Ignoring App Store Connect error about internal groups - in practice it works fine'
    end
  end
end
