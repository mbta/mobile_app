# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

setup_ci if ENV['CI']

platform :android do
  desc "Build an .apk and an .aab with an upcoming version code"
  lane :build do |options|
    version_codes = google_play_track_version_codes(
      track: "internal",
    )
    last_version_code = version_codes.max
    next_version_code = last_version_code + 1
    properties = {
      "android.injected.signing.store.file" => ENV["KEYSTORE_FILE"],
      "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
      "android.injected.signing.key.alias" => ENV["KEY_ALIAS"],
      "android.injected.signing.key.password" => ENV["KEY_PASSWORD"],
      "android.injected.version.code" => next_version_code,
      # TODO: Define the version name once and share it between iOS and Android
      "android.injected.version.name" => "0.1.0",
    }
    gradle(
      task: 'assemble',
      build_type: 'Release',
      properties: properties
    )
    gradle(
      task: 'bundle',
      build_type: 'Release',
      properties: properties
    )
  end

  desc "Deploy a new version to Google Play for internal testing"
  lane :internal do |options|
    upload_to_play_store(
      track: "internal",
      aab: "androidApp/build/outputs/bundle/release/androidApp-release.aab",
    )
  end
end

platform :ios do
  desc "Configure App Store Connect"
  lane :app_store_connect do
    app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_API_KEY_ISSUER"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_P8"],
    )
  end

  desc "Set up code signing"
  lane :certs do |options|
    app_store_connect
    get_certificates(output_path: "iosApp/secrets", force: options[:force])
    get_provisioning_profile()
  end

  desc "Run tests"
  lane :test do |options|
    run_tests(
      workspace: "iosApp/iosApp.xcworkspace",
      scheme: "Staging",
      device: "iPhone 15 (17.5)",
      testplan: "iosAppRetries",
      output_directory: options[:output_directory],
      xcodebuild_formatter: options[:xcodebuild_formatter],
      number_of_retries: 3
    )
  end

  desc "Build the app"
  lane :build do |options|
    app_store_connect
    certs
    increment_build_number(
      build_number: latest_testflight_build_number + 1,
      xcodeproj: "iosApp/iosApp.xcodeproj"
    )
    build_app(
      workspace: "iosApp/iosApp.xcworkspace",
      scheme: "Staging",
      output_directory: options[:output_directory],
      export_method: "app-store-connect",
      xcodebuild_formatter: options[:xcodebuild_formatter]
    )
  end

  desc "Upload the app to TestFlight"
  lane :testflight do |options|
    app_store_connect
    upload_to_testflight(
      ipa: options[:ipa],
      pkg: options[:pkg],
      distribute_external: true,
      groups: ["Staging App Users", "TID Beta Testers"]
    )
  end
end
