# frozen_string_literal: true

# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

setup_ci if ENV['CI']

platform :android do
  def package_name(flavor)
    case flavor
    when 'Prod'
      'com.mbta.tid.mbta_app'
    when 'Staging'
      'com.mbta.tid.mbta_app.staging'
    else
      raise "Unknown flavor #{flavor}"
    end
  end

  desc 'Build an .apk and an .aab with an upcoming version code'
  lane :build do |options|
    package_name = package_name(options[:flavor])

    last_version_code =
      if options[:build_type] == 'Debug'
        0
      else
        google_play_track_version_codes(
          package_name: package_name,
          track: 'internal'
        ).max
      end

    next_version_code = last_version_code + 1
    properties =
      if options[:build_type] == 'Debug'
        { 'android.injected.version.code' => next_version_code }
      else
        {
          'android.injected.signing.store.file' => ENV.fetch('KEYSTORE_FILE', nil),
          'android.injected.signing.store.password' => ENV.fetch('KEYSTORE_PASSWORD', nil),
          'android.injected.signing.key.alias' => ENV.fetch('KEY_ALIAS', nil),
          'android.injected.signing.key.password' => ENV.fetch('KEY_PASSWORD', nil),
          'android.injected.version.code' => next_version_code
        }
      end
    gradle(
      task: 'assemble',
      flavor: options[:flavor],
      build_type: options[:build_type],
      properties: properties
    )
    gradle(
      task: 'bundle',
      flavor: options[:flavor],
      build_type: options[:build_type],
      properties: properties
    )
  end

  desc 'Deploy a new version to Google Play for internal testing'
  lane :internal do |options|
    package_name = package_name(options[:flavor])
    flavor = options[:flavor].downcase
    upload_to_play_store(
      package_name: package_name,
      track: 'internal',
      aab: "androidApp/build/outputs/bundle/#{flavor}Release/androidApp-#{flavor}-release.aab"
    )
  end
end

platform :ios do
  def app_identifier(scheme)
    case scheme
    when 'Prod'
      'com.mbta.tid.mbtaapp'
    when 'Staging'
      'com.mbta.tid.mbtaapp.staging'
    else
      raise "Unknown scheme #{scheme}"
    end
  end

  def keychain_path
    # For reasons, KEYCHAIN_PATH is not the actual keychain path created by setup_ci,
    # it's missing a "-db" suffix that macOS adds for some reason,
    # and this helper will both add that suffix to a path and turn `"login"` into a full path of its own
    FastlaneCore::Helper.keychain_path(lane_context[SharedValues::KEYCHAIN_PATH] || 'login')
  end

  desc 'Configure App Store Connect'
  private_lane :app_store_connect do
    app_store_connect_api_key(
      key_id: ENV.fetch('APP_STORE_CONNECT_API_KEY_ID', nil),
      issuer_id: ENV.fetch('APP_STORE_CONNECT_API_KEY_ISSUER', nil),
      key_content: ENV.fetch('APP_STORE_CONNECT_API_KEY_P8', nil)
    )
  end

  desc 'Create a new code signing certificate'
  lane :cert_create do
    app_store_connect
    get_certificates(output_path: 'iosApp/secrets', force: true)
  end

  desc 'Load downloaded code signing certificates'
  lane :cert_load do |options|
    app_store_connect
    import_certificate(
      certificate_path: "iosApp/secrets/#{options[:cert_id]}.cer",
      keychain_path: keychain_path
    )
    import_certificate(
      certificate_path: "iosApp/secrets/#{options[:cert_id]}.p12",
      keychain_path: keychain_path
    )
    get_certificates(
      output_path: 'iosApp/secrets',
      force: false,
      keychain_path: keychain_path
    )
  end

  desc 'Check certificate and provisioning configuration'
  lane :cert_check do |options|
    app_store_connect
    get_certificates(
      output_path: 'iosApp/secrets',
      force: false,
      keychain_path: keychain_path
    )
    get_provisioning_profile(app_identifier: app_identifier(options[:scheme]), output_path: 'iosApp/secrets')
  end

  desc 'Run tests'
  lane :test do |options|
    run_tests(
      workspace: 'iosApp/iosApp.xcworkspace',
      scheme: 'Staging',
      device: 'iPhone 15 (17.5)',
      testplan: 'iosAppRetries',
      output_directory: options[:output_directory],
      xcodebuild_formatter: options[:xcodebuild_formatter],
      number_of_retries: 3
    )
  end

  desc 'Build the app'
  lane :build do |options|
    app_store_connect
    cert_check(scheme: options[:scheme])
    increment_build_number(
      build_number: latest_testflight_build_number(app_identifier: app_identifier(options[:scheme])) + 1,
      xcodeproj: 'iosApp/iosApp.xcodeproj'
    )
    build_app(
      workspace: 'iosApp/iosApp.xcworkspace',
      scheme: options[:scheme],
      output_directory: 'iosApp/build',
      output_name: 'iosApp.ipa',
      export_method: 'app-store',
      xcodebuild_formatter: options[:xcodebuild_formatter]
    )
    if ENV['SENTRY_AUTH_TOKEN'].nil?
      UI.important 'Skipped Sentry upload because SENTRY_AUTH_TOKEN not set'
    else
      sentry_debug_files_upload(
        org_slug: 'mbtace',
        project_slug: 'mobile_app_ios',
        path: 'iosApp/build',
        include_sources: true
      )
    end
  end

  desc 'Upload the app to TestFlight for internal testing'
  lane :internal do |options|
    app_store_connect
    begin
      case options[:scheme]
      when 'Staging'
        upload_to_testflight(
          ipa: 'iosApp/build/iosApp.ipa',
          distribute_external: true,
          changelog: '',
          groups: ['Staging App Users', 'TID Beta Testers']
        )
      when 'Prod'
        upload_to_testflight(
          ipa: 'iosApp/build/iosApp.ipa',
          distribute_external: true,
          changelog: '',
          groups: ['Alpha Testers']
        )
      end
    rescue Spaceship::UnexpectedResponse => e
      unless e.error_info == 'Builds cannot be assigned to this internal group. - Cannot add internal group to a build.'
        raise
      end

      UI.important 'Ignoring App Store Connect error about internal groups - in practice it works fine'
    end
  end
end
